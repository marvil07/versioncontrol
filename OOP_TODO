on code
-------

- tests for Version Control core
- follow sdboyer suggestions (http://groups.drupal.org/node/23015#comment-79517)
  - Really, I don't think we're getting much with VersioncontrolAccount::userAccountsLoad(). If it's a menu loader function, just leave it as a function; unless/until the menu system supports doing things like this, then all we're really doing is introducing an extra couple method calls. Given that, at least right now, we're not storing any of that data into static vars in VersioncontrolAccount::getAccounts(). (Unless I missed it).
  - Things like the static $successor_action_priority array in VersioncontrolItem::getItemHistory() should be declared as class constants.
  - I don't think including the @access tag is necessary by drupal coding standards. If it helps your doxygen generation, tho, all good.
  - There are prolly other ones, but one coding convention we have is to get rid of the prepended underscore on function names when they become methods, and just make em protected. f.e. VersioncontrolItem::_badItemWarning.
  - I would have figured, based on last week's conversation, that it's not just VersioncontrolBackend that's abstract, but also VersioncontrolOperation, VersioncontrolItem, VersioncontrolRepository, etc; that these, too, will be extended by the backends as needed. Although that doesn't require them to be abstract, of course - just that they hold all the shared code that's common to all the vcses.
- avoid notices on add repository (account status module?)
- refactor all methods in each class, to avoid calling now deleted funcitons and call each class where is necesary.
 - read each method again on all classes   
- while changing code:
  - avoid implicit data(ej. do not pass repository array, now it should be an object, to a repository method)
- unify get<some entity>, format<some entity>, load<some entity> in one <some entity> method if applies
- remove fetch*() methods because with objects we can do that on demand whenever the API user needs the information.

"fetch_source_items(), fetch_successor_items(), get_common_directory_path() and get_item_paths() apply to a list of items, we might consider to have a VersionControlItemList instead of a single array, in order to have it perform lazy loading and stuff. The other possibility would be to keep items in memory as a static copy, but that needs further thought."

"Example: VersionControlItem::fetchCommitOperations() (see above) can be reduced to VersionControlItem::commitOperations(), and the item object keeps track whether the commit operations have already been fetched or not (is_null($this->commitOperations))."

"The get_url_*() functions are actually the thing that the "repository url backend" provides. Let's stick all of them into a VersionControlRepositoryDefaultURLBackend class (implementing a VersionControlRepositoryURLBackend interface) which can be accessed by $repository->urls()->commitView($operation) or similar."
(I do not know how to represent interfaces on dia, so make it on code)

Replace versioncontrol_backend_implements() approach with one interface per feature
- start with the "simple" VersionControlRepositoryURLBackend interface proposed by jpetso

on design
---------

- "Still not solved: how to represent accounts that do not have an exact uid/repository/username combination."
  - Start working on account stuff(now there are two classes: VersioncontrolVcsAccount and VersioncontrolAccount)
  - defered until all classes stuff is done(suggested by jpetso)

do not forget
------------- 
- we want to let other modules inherit from all of our classes
- camelcase at conceptual boundaries
- __USE__ gets, like php spl
- for now  do not use SplFileInfo as a parent class for VersioncontrolItem, but maybe in near future when it's considered a need(maybe performance)
- api class dropped, its methods would be on the module file (so. we've got backend objects. pretty easy to retrieve via discovery hook and subsequent instantiation, probably.)
- at the beginning we should have attributes as private as possible and in the process open it as it's needed, taking more time for it before a release
  - later discusion last week result in "use protected in all places" (but later I found exceptions like repository cache :p)
- The future of source items in the main API module (we want them as an optional bonus instead of a log-parse-time requirement)
